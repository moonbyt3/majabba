{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","text","setText","password","setPassword","encryptedText","setEncryptedText","encryptionFinished","setEncryptionFinished","copySuccess","setCopySuccess","textAreaRef","useRef","encrypt","xxtea","decrypt","className","type","id","value","onChange","e","target","placeholder","name","cols","rows","ref","onClick","preventDefault","current","select","document","execCommand","focus","enc","alert","dec","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAmGeA,MA9Ff,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAG6BJ,mBAAS,IAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAIuCN,oBAAS,GAJhD,mBAINO,EAJM,KAIcC,EAJd,OAMyBR,mBAAS,IANlC,mBAMNS,EANM,KAMOC,EANP,KAOPC,EAAcC,iBAAO,MAsCrBC,EAAU,WACd,OAAOC,IAAMD,QAAQZ,EAAME,IAEvBY,EAAU,WACd,OAAOD,IAAMC,QAAQV,GAAgCJ,EAAOE,IAG9D,OACE,yBAAKa,UAAU,OACb,uCACA,mDACA,0BAAMA,UAAU,eACd,2BACEC,KAAK,OACLC,GAAG,OACHC,MAAOhB,EACPiB,SAtBqB,SAACC,GAC5BjB,EAAYiB,EAAEC,OAAOH,QAsBfI,YAAY,aAGd,8BACEC,KAAK,OACLN,GAAG,OACHO,KAAK,KACLC,KAAK,KACLP,MAAOlB,EACPmB,SA7BiB,SAACC,GACxBnB,EAAQmB,EAAEC,OAAOH,QA6BXQ,IAAKhB,IAKLJ,GACA,oCACE,yBAAKS,UAAU,YACb,4BAAQA,UAAU,MAAMY,QAvEpC,SAAyBP,GACvBA,EAAEQ,iBACFlB,EAAYmB,QAAQC,SACpBC,SAASC,YAAY,QAGrBZ,EAAEC,OAAOY,QACTxB,EAAe,aAgEL,2BAEDD,GAAe,yBAAKO,UAAU,QAAQP,IAG3C,yBAAKO,UAAU,YACb,4BAAQC,KAAK,SAASD,UAAU,MAAMY,QAnE9C,SAAuBP,GAErB,GADAA,EAAEQ,iBACe,KAAb1B,EAAiB,CACnB,IAAIgC,EAAMtB,IACVP,EAAiB6B,GACjBjC,EAAQiC,GACR3B,GAAsB,QAEtB4B,MAAM,0BA2DF,WACA,4BAAQnB,KAAK,SAASD,UAAU,MAAMY,QAzD9C,SAAuBP,GAErB,GADAA,EAAEQ,iBACe,KAAb1B,GAA4B,KAATF,EAAa,CAClC,IAAIoC,EAAMtB,IACVb,EAAQmC,QAERD,MAAM,4BAmDF,eChFUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3c1d486f.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\r\nimport xxtea from 'xxtea';\r\n\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [text, setText] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [encryptedText, setEncryptedText] = useState('');\r\n  const [encryptionFinished, setEncryptionFinished] = useState(false);\r\n  \r\n  const [copySuccess, setCopySuccess] = useState('');\r\n  const textAreaRef = useRef(null);\r\n\r\n  function copyToClipboard(e) {\r\n    e.preventDefault();\r\n    textAreaRef.current.select();\r\n    document.execCommand('copy');\r\n    // This is just personal preference.\r\n    // I prefer to not show the the whole text area selected.\r\n    e.target.focus();\r\n    setCopySuccess('Copied!');\r\n  };\r\n\r\n  function handleEncrypt(e) {\r\n    e.preventDefault();\r\n    if (password !== '') {\r\n      let enc = encrypt();\r\n      setEncryptedText(enc);\r\n      setText(enc);\r\n      setEncryptionFinished(true);\r\n    } else {\r\n      alert('Enter password first');\r\n    }\r\n  }\r\n  function handleDecrypt(e) {\r\n    e.preventDefault();\r\n    if (password !== '' && text !== '') {\r\n      let dec = decrypt();\r\n      setText(dec);\r\n    } else {\r\n      alert('Please fill all fields');\r\n    }\r\n  }\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n  }\r\n  const handleTextChange = (e) => {\r\n    setText(e.target.value);\r\n  } \r\n  const encrypt = () => {\r\n    return xxtea.encrypt(text, password);\r\n  }\r\n  const decrypt = () => {\r\n    return xxtea.decrypt(encryptedText ? encryptedText : text , password);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Majabba</h1>\r\n      <h4>Crypt your messages</h4>\r\n      <form className=\"crypto-form\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"pass\"\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        \r\n        <textarea \r\n          name=\"text\"\r\n          id=\"text\"\r\n          cols=\"30\"\r\n          rows=\"10\"\r\n          value={text}\r\n          onChange={handleTextChange}\r\n          ref={textAreaRef}\r\n        />\r\n        {\r\n          /* Logical shortcut for only displaying the \r\n            button if the copy command exists */\r\n          encryptionFinished &&\r\n          <>\r\n            <div className=\"btn-wrap\">\r\n              <button className=\"btn\" onClick={copyToClipboard}>Copy text to clipboard</button> \r\n            </div>\r\n            {copySuccess && <div className=\"copy\">{copySuccess}</div>}\r\n          </>\r\n        }\r\n        <div className=\"btn-wrap\">\r\n          <button type=\"submit\" className=\"btn\" onClick={handleEncrypt}>Encrypt</button>\r\n          <button type=\"submit\" className=\"btn\" onClick={handleDecrypt}>Decrypt</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}