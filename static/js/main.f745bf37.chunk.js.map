{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","text","setText","password","setPassword","encryptedText","setEncryptedText","encryptionFinished","setEncryptionFinished","copySuccess","setCopySuccess","textAreaRef","useRef","encrypt","xxtea","decrypt","className","type","id","value","onChange","e","target","placeholder","name","cols","rows","ref","onClick","preventDefault","current","select","document","execCommand","focus","enc","alert","dec","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAmGeA,MA9Ff,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAG6BJ,mBAAS,IAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAIuCN,oBAAS,GAJhD,mBAINO,EAJM,KAIcC,EAJd,OAMyBR,mBAAS,IANlC,mBAMNS,EANM,KAMOC,EANP,KAOPC,EAAcC,iBAAO,MAsCrBC,EAAU,WACd,OAAOC,IAAMD,QAAQZ,EAAME,IAEvBY,EAAU,WACd,OAAOD,IAAMC,QAAQV,EAAeF,IAGtC,OACE,yBAAKa,UAAU,OACb,uCACA,mDACA,0BAAMA,UAAU,eACd,2BACEC,KAAK,OACLC,GAAG,OACHC,MAAOhB,EACPiB,SAtBqB,SAACC,GAC5BjB,EAAYiB,EAAEC,OAAOH,QAsBfI,YAAY,aAGd,8BACEC,KAAK,OACLN,GAAG,OACHO,KAAK,KACLC,KAAK,KACLP,MAAOlB,EACPmB,SA7BiB,SAACC,GACxBnB,EAAQmB,EAAEC,OAAOH,QA6BXQ,IAAKhB,IAKLJ,GACA,oCACE,yBAAKS,UAAU,YACb,4BAAQA,UAAU,MAAMY,QAvEpC,SAAyBP,GACvBA,EAAEQ,iBACFlB,EAAYmB,QAAQC,SACpBC,SAASC,YAAY,QAGrBZ,EAAEC,OAAOY,QACTxB,EAAe,aAgEL,2BAEDD,GAAe,yBAAKO,UAAU,QAAQP,IAG3C,yBAAKO,UAAU,YACb,4BAAQC,KAAK,SAASD,UAAU,MAAMY,QAnE9C,SAAuBP,GAErB,GADAA,EAAEQ,iBACe,KAAb1B,EAAiB,CACnB,IAAIgC,EAAMtB,IACVP,EAAiB6B,GACjBjC,EAAQiC,GACR3B,GAAsB,QAEtB4B,MAAM,0BA2DF,WACA,4BAAQnB,KAAK,SAASD,UAAU,MAAMY,QAzD9C,SAAuBP,GAErB,GADAA,EAAEQ,iBACe,KAAb1B,GAA4B,KAATF,EAAa,CAClC,IAAIoC,EAAMtB,IACVb,EAAQmC,QAERD,MAAM,4BAmDF,eChFUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f745bf37.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport xxtea from 'xxtea';\n\nimport './App.scss';\n\nfunction App() {\n  const [text, setText] = useState('');\n  const [password, setPassword] = useState('');\n  const [encryptedText, setEncryptedText] = useState('');\n  const [encryptionFinished, setEncryptionFinished] = useState(false);\n  \n  const [copySuccess, setCopySuccess] = useState('');\n  const textAreaRef = useRef(null);\n\n  function copyToClipboard(e) {\n    e.preventDefault();\n    textAreaRef.current.select();\n    document.execCommand('copy');\n    // This is just personal preference.\n    // I prefer to not show the the whole text area selected.\n    e.target.focus();\n    setCopySuccess('Copied!');\n  };\n\n  function handleEncrypt(e) {\n    e.preventDefault();\n    if (password !== '') {\n      let enc = encrypt();\n      setEncryptedText(enc);\n      setText(enc);\n      setEncryptionFinished(true);\n    } else {\n      alert('enter password first');\n    }\n  }\n  function handleDecrypt(e) {\n    e.preventDefault();\n    if (password !== '' && text !== '') {\n      let dec = decrypt();\n      setText(dec);\n    } else {\n      alert('Please fill all fields');\n    }\n  }\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  }\n  const handleTextChange = (e) => {\n    setText(e.target.value);\n  } \n  const encrypt = () => {\n    return xxtea.encrypt(text, password);\n  }\n  const decrypt = () => {\n    return xxtea.decrypt(encryptedText, password);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Majabba</h1>\n      <h4>Crypt your messages</h4>\n      <form className=\"crypto-form\">\n        <input\n          type=\"text\"\n          id=\"pass\"\n          value={password}\n          onChange={handlePasswordChange}\n          placeholder=\"Password\"\n        />\n        \n        <textarea \n          name=\"text\"\n          id=\"text\"\n          cols=\"30\"\n          rows=\"10\"\n          value={text}\n          onChange={handleTextChange}\n          ref={textAreaRef}\n        />\n        {\n          /* Logical shortcut for only displaying the \n            button if the copy command exists */\n          encryptionFinished &&\n          <>\n            <div className=\"btn-wrap\">\n              <button className=\"btn\" onClick={copyToClipboard}>Copy text to clipboard</button> \n            </div>\n            {copySuccess && <div className=\"copy\">{copySuccess}</div>}\n          </>\n        }\n        <div className=\"btn-wrap\">\n          <button type=\"submit\" className=\"btn\" onClick={handleEncrypt}>Encrypt</button>\n          <button type=\"submit\" className=\"btn\" onClick={handleDecrypt}>Decrypt</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}